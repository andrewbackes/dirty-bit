To Do List:
---------------------------------------------

-add checking moves to the captures list in the qsearch.

-revamp HASH class. do not need an entire MOVE in there, just to/from. Also, score does not need to be an int, it can be a short. 

-revamp MOVE, to take out score and do score in MOVELIST instead. --> resulted in 2.5m NPS to 2.0 NPS drop at the same node count.

-In NextMove(), do not return the dublicate of the hash move and the killers

-Add killers from 2 plies ago.

-replace cout with a send command, this way output streams can be easily controlled.

-remove static score from MOVE class.

-rewrite SEE.

-Replace several masks with macros.

-Tune IID

-Some search features seem to be better in different game phases (like hashing nullmove beta cutoffs are better in late game), toggle them accordingly.

-Have the MOVELIST return a pointer to the current move to play. not a copy of it.

-by having knight=bishop, the even captures include NxB and BxN, but if these are changed the even capture detection will get messed up.

-reuse the "to" variable in the move gen functions, dont make them inside the {}'s.
-replace all of the turning off the lsb that are currently of the form 
	bitboard^=(1i64 << x); to be bitboard &= bitboard -1;
	
-Make MOVE and CAPTURER derived from the same class.
-Make QMOVELIST and MOVELIST derived from the same parent class.

-verify that alpha cutoffs values are actually returned byt the searchhash, so that it can acurately be used in the null move condition.

-when in check, generate evasions first.

-Hash table should not be global. Put this in an engine class.

-try countering the oscilation by doing a one ply search on the last move in the PV
-also try using the previous odd or even search, if there is under 100 change.

-try different compilers for possible speed increases.

-Try regular alpha-beta for depths 1 and 2.

-Do not LMR when:
	-to close to horizon (within 3 ply??)
	-can not be in check
	-move does not check opponent  <- For this, maybe pass to the next search if this was a reduction, then extend 1 more if in check.
	-non capture / non promotion
	-already extended

-check extensions
	-If the move checks the opponent, extend the depth by one ply. also, can not reduce depth later or forward prune.

-change makemove capture detection by board[m.to] rather than captured_piece_id, then score en passant kills.

-use a seperate movegen when the king is in check.

-Optimization: arrange if statements by popularity in isInCheck, isAttacked, makemove, etc.
-Optimization: some of the bitscans can be byref to save memory.

-incremental position scoring. for move ordering?

-move count will be messed up from entering the FEN in directly. Fix this.

-hash suggestion is on the move list twice.

-Move generation may favor white, since N,NE,NW moves are generated before S,SE,SW

-fit the time allocation function better to the graph: http://chessprogramming.wikispaces.com/Time+Management
-early iterative deepening cutoff for take-backs
-early iterative deepening cutoff for only one move.

-Opening book.
-endgame tables

-Solidify how castling is handled... 
	Right now it is sort of split between moveGen and makeMove.
	This more than likely leads to unneeded checks along the way.

-Revamp MakeMove(). It is possible that there are several unneeded checks.

-Create a UCI class
	-Have a const array of command and function pointer pairs.
	-make sure everything uses an arbitrary stream, not just cout.

-Pondering!
-Parrallel search
-magics!

-Research futility, limited razoring

-Evaluation order: mobility, passed pawn.

-Eval ideas:
---> instead of doing a tapered eval. have something like 256 evals and use a pointer in the search class or board class to the eval that will be used in that search, this will have to be changed in MakeMove though, so it may not be worth it.